import javax.sound.sampled.AudioSystem

plugins {
    id 'java'
    id 'war'
    id 'org.jetbrains.kotlin.jvm' version '1.9.23'
    id 'org.jetbrains.kotlin.plugin.jpa' version '2.0.21'
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += "-Dfile.encoding=UTF-8"
}

group = 'ru.mikhail'
version = project.findProperty("projectVersion")

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

dependencies {
    compileOnly "jakarta.enterprise:jakarta.enterprise.cdi-api:${cdiApiVersion}"
    compileOnly "jakarta.persistence:jakarta.persistence-api:${jpaApiVersion}"
    compileOnly "jakarta.faces:jakarta.faces-api:${jakartaFacesApiVersion}"
    compileOnly "jakarta.servlet:jakarta.servlet-api:${servletApiVersion}"

    implementation "jakarta.faces:jakarta.faces-api:${jakartaFacesApiVersion}"
    implementation "org.hibernate.orm:hibernate-core:${hibernateVersion}"
    implementation "jakarta.el:jakarta.el-api:${jakartaElVersion}"
    implementation "jakarta.validation:jakarta.validation-api:${jakartaValidationVersion}"
    implementation "org.postgresql:postgresql:${postgresqlVersion}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

test {
    useJUnitPlatform()
}

kotlin {
    jvmToolchain(Integer.parseInt(project.findProperty("kotlinJvmTarget") as String))
}

tasks.register('compile') {
    group = 'lab'
    description = 'Компиляция исходного кода проекта.'
    dependsOn 'classes'
}

war {
    archiveFileName = "lab3-${version}.war"
    manifest {
        attributes(
                'Implementation-Title': 'Lab3 WebApp',
                'Implementation-Version': version
        )
    }
}

tasks.register('lab_build') {
    group = 'lab'
    description = 'Компиляция исходного кода и сборка war архива.'
    dependsOn 'compile', 'war'
    finalizedBy 'music'
}

tasks.register('lab_clean') {
    group = 'lab'
    description = 'Удаление скомпилированного кода и временных файлов'
    doLast {
        delete "$buildDir"
        println 'Все временные файлы удалены'
    }
}

tasks.register('music') {
    group = 'lab'
    description = 'Проигрывает музыку после сборки проекта (асинхронно)'
    doLast {
        println '[music] Воспроизведение музыки в фоне...'
        def musicFile = file('src/main/resources/dolina.wav')
        if (musicFile.exists()) {
            Thread.start {
                try {
                    def clip = AudioSystem.getClip()
                    clip.open(AudioSystem.getAudioInputStream(musicFile))
                    clip.start()
                    println '[music] ▶ Музыка играет (не блокирует поток)'
                } catch (Exception e) {
                    println "[music] Ошибка воспроизведения: ${e.message}"
                }
            }
        } else {
            println '[music] Файл не найден: dolina.wav'
        }
    }
}

tasks.register('alt') {
    group = 'lab'
    description = 'Создание альтернативной версии с заменой всех имён классов, интерфейсов, переменных'

    def altSrcDir = file("$buildDir/altSrc")
    def originalSrcDirs = []

    dependsOn 'clean'

    doFirst {
        println '[alt] Копируем исходники...'
        copy {
            from 'src/main/kotlin'
            into altSrcDir
            include '**/*.kt'
        }

        println '[alt] Ищем все классы/объекты/интерфейсы и делаем замену...'

        def replacements = [:]  // Map<String, String> = [OriginalName: AltOriginalName]

        // Шаг 1: найти все имена (class|object|interface)
        fileTree(dir: altSrcDir, include: '**/*.kt').each { file ->
            def text = file.getText('UTF-8')
            def matcher = text =~ /(?:class|object|interface)\s+([A-Z][A-Za-z0-9_]*)/

            matcher.each { match ->
                def originalName = match[1]
                def altName = "Alt${originalName}"
                replacements[originalName] = altName
            }
        }

        // Шаг 2: заменить во всех файлах и переименовать
        fileTree(dir: altSrcDir, include: '**/*.kt').each { file ->
            def text = file.getText('UTF-8')
            replacements.each { orig, alt ->
                text = text.replaceAll("\\b${orig}\\b", alt)
            }
            file.write(text, 'UTF-8')

            // Переименовать файл
            replacements.each { orig, alt ->
                if (file.name == "${orig}.kt") {
                    file.renameTo(new File(file.parentFile, "${alt}.kt"))
                }
            }
        }

        println '[alt] Подмена исходников Gradle...'
        originalSrcDirs = sourceSets.main.java.srcDirs
        sourceSets.main.java.setSrcDirs([altSrcDir])
    }

    doLast {
        println '[alt] Выполняем gradlew build...'
        exec {
            commandLine 'cmd', '/c', 'gradlew.bat', 'build', '--no-daemon'
        }
        println '[alt] Возвращаем исходники...'
        sourceSets.main.java.setSrcDirs(originalSrcDirs)
    }
}



tasks.register('lab_test') {
    group = 'lab'
    description = 'Запуск JUnit-тестов после сборки проекта.'
    dependsOn 'build'
    doLast {
        println '[test] Запускаем J-Unit тесты'
        exec {
            commandLine 'cmd', '/c', 'gradlew.bat', 'test', '--no-daemon'
        }
    }
}
